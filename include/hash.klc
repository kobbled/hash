PROGRAM class_name
%NOLOCKGROUP
%COMMENT = 'hash class'

%include namespace.m

-- declare type
%include define_type.m

--print user defined struct
%ifdef hash_type_define
hash_type_define
%endif

--print hash struct
t_hash(hashname,hval_def,class_name)

%include hashclass.klh
%include hashclass.private.klh

--Private Members

ROUTINE djb2
VAR
	hash : INTEGER
	i    : INTEGER
	char : INTEGER
BEGIN
	hash = 5381
	FOR i=1 TO STR_LEN(str) DO
		char = ORD(str, i)
		hash = hash * 33 + char
	ENDFOR
	RETURN(hash)
END djb2

-- From Java 1.5 string library
ROUTINE jsStr
VAR
	hash : INTEGER
	i    : INTEGER
BEGIN
	hash = 0
	FOR i=1 TO STR_LEN(str) DO
		hash = (31 * hash) + ord(str, i)
	ENDFOR
	RETURN(hash)
END jsStr

ROUTINE hMod
VAR
	hash : INTEGER
BEGIN
	hash = jsStr(key)
	RETURN(hash MOD len + 1)
END hMod

ROUTINE hGetIndex
VAR
	hash      : INTEGER
	tblLength : INTEGER
	index     : INTEGER
	count     : INTEGER
BEGIN
	hash = jsStr(key)
	tblLength = ARRAY_LEN(tbl)
	index = hash MOD tblLength + 1

	FOR count=0 TO tblLength DO
		IF UNINIT(tbl[index].key) THEN tbl[index].key = ''; ENDIF

		IF get THEN
			-- get requests require key=key
			IF ((tbl[index].key=key)) THEN
				RETURN(index)
			ENDIF
		ELSE
			-- put requests require key=key or empty
			IF ((tbl[index].key=key) OR
				(tbl[index].key='')) THEN
				RETURN(index)
			ENDIF
		ENDIF

		index = index + 1
		IF index > tblLength THEN
			index = 1
		ENDIF
	ENDFOR

	-- did not find index
	RETURN(0)
END hGetIndex


ROUTINE hPut
VAR
	index : INTEGER
BEGIN
	index = hGetIndex(key, false, tbl)
	IF index > 0 THEN
		tbl[index].key = key
		tbl[index].val = value
		RETURN(TRUE)
	ELSE
		RETURN(FALSE)
	ENDIF
END hPut

ROUTINE hGet
VAR
	index : INTEGER
  empty   : hval_def
BEGIN
	index = hGetIndex(key, true, tbl)
  IF index = 0 THEN RETURN(FALSE); ENDIF
	
	out_val = tbl[index].val
  RETURN(TRUE)
END hGet

ROUTINE hDel
VAR
	index : INTEGER
  empty   : hval_def
BEGIN
	index = hGetIndex(key, true, tbl)
	IF index > 0 THEN
		IF ((tbl[index].key=key)) THEN
			tbl[index].key = ''
			RETURN(TRUE)
		ENDIF
	ENDIF

	RETURN(FALSE)
END hDel

ROUTINE hClear
  VAR
    i       : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(tbl) DO
      tbl[i].key = ''
      tbl[i].val = clrData
    ENDFOR

    RETURN(TRUE)
  END hClear

--Public Members

ROUTINE put
VAR
	entry : INTEGER
BEGIN
	IF (key='') THEN RETURN(FALSE); ENDIF

	RETURN(hPut(key, value, BYNAME(tblProg, tblName, entry)))
END put


ROUTINE get
VAR
	entry : INTEGER
  empty   : hval_def
BEGIN
	IF (key='') THEN RETURN(FALSE); ENDIF
  
	RETURN (hGet(key, out_val, BYNAME(tblProg, tblName, entry)))
END get

ROUTINE delete
VAR
	entry : INTEGER
BEGIN
	IF (key='') THEN RETURN(FALSE); ENDIF

	RETURN (hDel(key, BYNAME(tblProg, tblName, entry)))
END delete

ROUTINE clear_table
  VAR
	  entry : INTEGER
  BEGIN
    RETURN ( hClear(BYNAME(tblProg, tblName, entry), clrData) )
  END clear_table

BEGIN
END class_name