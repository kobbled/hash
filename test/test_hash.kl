PROGRAM test_hash
%NOLOCKGROUP

-- ** TYPES **
%include hashstring.klt
t_hash(hashname,hval_def,hashstr)

VAR
	smallTable : ARRAY[1] OF hashname
	twoTable   : ARRAY[2] OF hashname

%include kunit.klh

-- hashstr
%class hashstr('hash.klc','hashclass_full.klh','hashstring.klt')

ROUTINE clearTables
VAR
	i : INTEGER
BEGIN
	smallTable[1].key = ''
	smallTable[1].val = ''

	FOR i=1 TO 2 DO
		twoTable[i].key = ''
		twoTable[i].val = ''
	ENDFOR
END clearTables

BEGIN
	kunit_test('djb2("a")', kunit_eq_int(177670, hashstr__djb2('a')))
	kunit_test('djb2("asdf")', kunit_eq_int(2090088131, hashstr__djb2('asdf')))
	-- djb2 overflows INTEGER
	--kunit_test('djb2("really long string")', kunit_eq_int((-3 022 999 531), djb2('really long string')))

	kunit_test('jsStrHash("a")', kunit_eq_int(97, hashstr__jsStr('a')))
	kunit_test('jsStrHash("asdf")', kunit_eq_int(3003444, hashstr__jsStr('asdf')))
	kunit_test('jsStrHash("a really really really long string")', kunit_eq_int(1765648255, hashstr__jsStr('a really really really long string')))

	clearTables
	kunit_test('hashGet with empty table returns empty string', kunit_eq_str('', hashstr__get('foo', 'test_hash', 'smallTable')))
	kunit_test('hashDel with empty string returns false', kunit_assert(NOT(hashstr__delete('', 'test_hash', 'smallTable'))))
	kunit_test('hashPut with empty string returns false', kunit_assert(NOT(hashstr__put('', 'foo', 'test_hash', 'smallTable'))))
	kunit_test('hashGet with empty string returns empty string', kunit_eq_str('', hashstr__get('', 'test_hash', 'smallTable')))


	kunit_test('put returns true', kunit_assert(hashstr__put('foo', 'bar', 'test_hash', 'smallTable')))
	kunit_test('hashPut puts a value', kunit_eq_str('bar', hashstr__get('foo', 'test_hash', 'smallTable')))

	kunit_test('put works', kunit_assert(hashstr__put('foo', 'baz', 'test_hash', 'smallTable')))
	kunit_test('hashPut overwrites', kunit_eq_str('baz', hashstr__get('foo', 'test_hash', 'smallTable')))

	-- can't put this... table full
	kunit_test('put returns false when full', NOT(kunit_assert(hashstr__put('bar', 'foo', 'test_hash', 'smallTable'))))
	kunit_test('hashPut does not put if tbl full', kunit_eq_str('', hashstr__get('bar', 'test_hash', 'smallTable')))

	kunit_test('hashDel returns true if it deletes key', kunit_assert(hashstr__delete('foo', 'test_hash', 'smallTable')))
	kunit_test('hashDel actually deletes', kunit_eq_str('', hashstr__get('foo', 'test_hash', 'smallTable')))
	kunit_test('hashDel returns false if it cannot find the key', NOT(kunit_assert(hashstr__delete('asdfasdf', 'test_hash', 'smallTable'))))

	-- test collisions
	kunit_test('mod hash of a is 2', kunit_eq_int(2, hashstr__hMod('a', 2)))
	kunit_test('mod hash of c is 2', kunit_eq_int(2, hashstr__hMod('c', 2)))
	kunit_test('index of a is 2', kunit_eq_int(2, hashstr__hGetIndex('a', false, twoTable)))
	kunit_test('index of c is 2 normally', kunit_eq_int(2, hashstr__hGetIndex('c', false, twoTable)))
	kunit_test('put a', kunit_assert(hashstr__put('a', 'foo', 'test_hash', 'twoTable')))
	kunit_test('index of c is 1 if 2 is full', kunit_eq_int(1, hashstr__hGetIndex('c', false, twoTable)))

	kunit_done
END test_hash
